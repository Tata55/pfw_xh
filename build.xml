<?xml version="1.0" encoding="UTF-8"?>

<project name="Pfw" default="help">

    <fileset id="php-sources" dir=".">
        <include name="*.php"/>
        <include name="classes/*.php"/>
    </fileset>

    <fileset id="unit-tests" dir="tests/unit">
        <include name="*Test.php"/>
    </fileset>

    <fileset id="attack-tests" dir="tests/attack">
        <include name="*Test.php"/>
    </fileset>

    <target name="help" description="lists available targets">
        <exec command="phing -l" outputProperty="help"/>
        <echo>${help}</echo>
    </target>

    <target name="uml" description="generates UML class diagram">
        <fail unless="plantuml" message="plantuml is not defined!"/>
        <exec command="umlwriter diagram:render --reflector=reflect --processor=plantuml classes | java -jar ${plantuml} -p -tsvg > classes.svg"
              logoutput="true"/>
    </target>

    <target name="sniff" description="checks adherence to coding standards">
        <phpcodesniffer standard="PSR2" haltonerror="true">
            <fileset refid="php-sources"/>
            <fileset refid="unit-tests"/>
        </phpcodesniffer>
    </target>

    <target name="mess" description="detects code flaws">
        <phpmd rulesets="codesize,unusedcode">
            <fileset refid="php-sources"/>
            <fileset refid="unit-tests"/>
         </phpmd>
    </target>

    <target name="compat" description="checks PHP requirements">
        <available file="phpcompatinfo.json" property="has_phpcompatinfo_json"/>
        <if>
            <not><isset property="has_phpcompatinfo_json"/></not>
            <then>
                <copy file="../pfw/phpcompatinfo.json" todir="."/>
            </then>
        </if>
        <exec command="phpcompatinfo analyser:run --alias current" logoutput="true"/>
        <if>
            <not><isset property="has_phpcompatinfo_json"/></not>
            <then>
                <delete file="phpcompatinfo.json"/>
            </then>
        </if>
    </target>

    <target name="unit-tests" description="runs all unit tests">
        <phpunit bootstrap="tests/unit/bootstrap.php" haltonerror="true" haltonfailure="true">
            <formatter type="plain" usefile="false"/>
            <batchtest>
                <fileset refid="unit-tests"/>
            </batchtest>
        </phpunit>
    </target>

    <target name="attack-tests" description="runs all attack tests">
        <fail unless="env.CMSIMPLEDIR" message="CMSIMPLEDIR undefined!"/>
        <phpunit haltonerror="true" haltonfailure="true">
            <formatter type="plain" usefile="false"/>
            <batchtest>
                <fileset refid="attack-tests"/>
            </batchtest>
        </phpunit>
    </target>

    <target name="coverage" description="generates coverage report">
        <exec executable="phpdbg" logoutput="true">
            <arg value="-qrr"/>
            <arg file="../pfw/vendor/phpunit/phpunit/phpunit"/>
            <arg value="--bootstrap"/>
            <arg file="./tests/unit/bootstrap.php"/>
            <arg value="--coverage-html"/>
            <arg file="./tests/coverage/"/>
            <arg value="--whitelist"/>
            <arg file="./classes/"/>
            <arg file="./tests/unit/"/>
        </exec>
    </target>

    <target name="doc" description="generates API documentation">
        <exec command="doxygen" passthru="true"/>
    </target>

    <target name="build">
        <fail unless="version" message="version is not defined!"/>
        <exec command="git archive -o export.tar HEAD" checkreturn="true"/>
        <untar file="export.tar" todir="export"/>
        <delete file="export.tar"/>
        <move todir="dist">
            <fileset dir="export">
                <include name="classes/Plugin.php"/>
                <include name="version.nfo"/>
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="PLUGIN_VERSION" value="${version}"/>
                </replacetokens>
            </filterchain>
        </move>
        <jsMin targetDir="dist" suffix="" failOnError="false">
            <fileset dir="export">
                <include name="*.min.js"/>
            </fileset>
        </jsMin>
        <move todir="dist">
            <fileset dir="export">
                <exclude name="build.xml"/>
                <exclude name="composer.*"/>
                <exclude name="docs/**"/>
                <exclude name="Doxyfile"/>
                <exclude name="pax_global_header"/>
                <exclude name="phpcompatinfo.json"/>
                <exclude name="tests/**"/>
            </fileset>
        </move>
        <delete dir="export"/>
        <copy file="dist/config/config.php" tofile="dist/config/defaultconfig.php" haltonerror="false"/>
        <copy file="dist/languages/en.php" tofile="dist/languages/default.php"/>
        <php function="strtolower" returnProperty="prefix">
            <param value="${phing.project.name}"/>
        </php>
        <zip destfile="${phing.project.name}_XH-${version}.zip" basedir="dist"
             prefix="${prefix}/"/>
        <delete dir="dist"/>
    </target>

    <target name="build-patch" description="builds a distributable update package">
        <fail unless="patchee" message="patchee is not defined!"/>
        <fail unless="version" message="version is not defined!"/>
        <php function="strtolower" returnProperty="prefix">
            <param value="${phing.project.name}"/>
        </php>
        <unzip file="${phing.project.name}_XH-${version}.zip" todir="current"/>
        <unzip file="${patchee}" todir="patchee"/>
        <copy todir="dist">
            <fileset dir="current">
                <different targetdir="patchee" ignoreFileTimes="true"/>
            </fileset>
        </copy>
        <delete>
            <fileset dir="dist/${prefix}">
                <include name="config/config.php"/>
                <include name="languages/??.php"/>
                <include name="css/stylesheet.css"/>
            </fileset>
        </delete>
        <zip destfile="${phing.project.name}_XH-${version}-PATCH.zip" basedir="dist" includeemptydirs="false"/>
        <delete dir="patchee" quiet="true"/>
        <delete dir="current" quiet="true"/>
        <delete dir="dist" quiet="true"/>
    </target>

    <target name="build-sdk" depends="doc">
        <fail unless="version" message="version is not defined!"/>
        <mkdir dir="dist"/>
        <copy todir="dist/doc">
            <fileset dir="doc"/>
        </copy>
        <copy file="sdk/README.md" tofile="dist/README.md"/>
        <copy file="LICENSE" tofile="dist/LICENSE"/>
        <zip destfile="Pfw_XH-SDK-${version}.zip" basedir="dist"
             prefix="pfw-sdk/"/>
        <delete dir="dist"/>
    </target>

    <target name="build-all" depends="build, build-sdk"
         description="builds the distributable ZIP archives"/>

</project>
